import { SpinalNode, SpinalContext } from 'spinal-env-viewer-graph-service';
import { INodeId, ISubscribeOptions } from '../interfaces';
import SocketHandler from '../socket/socketHandlers';
import { Socket } from 'socket.io';
declare class SpinalGraphUtils {
    spinalConnection: spinal.FileSystem;
    private nodeBinded;
    private static instance;
    private socketHandler;
    private constructor();
    static getInstance(): SpinalGraphUtils;
    init(socketHandler: SocketHandler): Promise<void>;
    bindNode(node: SpinalNode<any>, context: SpinalContext<any>, options: ISubscribeOptions, eventName?: string, socket?: Socket, subscription_data?: INodeId): Promise<void>;
    bindContextTree(startNode: SpinalNode<any>, context: SpinalContext<any>, socket: Socket, subscription_data: INodeId): void;
    bindChildNotInContext(node: SpinalNode<any>, socket: Socket, subscription_data: INodeId): Promise<void>;
    rebindAllNodes(): Promise<void>;
    bindTreeNotInContext(node: SpinalNode<any>, socket: Socket, subscription_data: INodeId): Promise<void>;
    private _getTreeNotInContext;
    private _rebindNode;
    private _unbindAllNodes;
    private _unbindNode;
    private _unbindBindProcess;
    private _bindAllChild;
    private _bindChildInContext;
    private _getRelationNameNotInContext;
    private _getRelationNames;
    private _bindInfoAndElement;
    private _addNodeToBindedNode;
    private _listenAddChildEvent;
    private _listenAddChildInContextEvent;
    private _listenRemoveChildEvent;
    private _listenAddChildrenEvent;
    private _activeEventSender;
    private _findNode;
    private _callbackListen;
}
export declare const spinalGraphUtils: SpinalGraphUtils;
export {};
