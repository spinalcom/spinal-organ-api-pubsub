import SocketHandler from '../socket/socketHandlers';
import { IRecursionArg } from '../interfaces';
declare class SpinalGraphUtils {
    spinalConnection: spinal.FileSystem;
    private nodeBinded;
    private static instance;
    private socketHandler;
    private constructor();
    static getInstance(): SpinalGraphUtils;
    init(socketHandler: SocketHandler): Promise<void>;
    recursionFunction(data: IRecursionArg, callback: Function): Promise<void>;
    bindNode(data: IRecursionArg): Promise<void>;
    browseContextTree(data: IRecursionArg, callback: Function): void;
    browseChildNotInContext(data: IRecursionArg, callback: Function): Promise<void>;
    browseTreeNotInContext(data: IRecursionArg, callback: Function): Promise<void>;
    rebindAllNodes(): Promise<void>;
    private _getTreeNotInContext;
    private _rebindNode;
    private _unbindAllNodes;
    private _unbindNode;
    private _unbindBindProcess;
    private _browseAllChild;
    private _browseChildInContext;
    private _getRelationNameNotInContext;
    private _getRelationNames;
    private _bindInfoAndElement;
    private _addNodeToBindedNode;
    private _listenAddChildEvent;
    private _listenAddChildInContextEvent;
    private _listenRemoveChildEvent;
    private _listenAddChildrenEvent;
    private _activeEventSender;
    private _findNode;
    private _callbackListen;
}
export declare const spinalGraphUtils: SpinalGraphUtils;
export {};
